### Date.prototype.addMonths

If you prefer, you can inject addMonths into the `Date.prototype` by requiring 'proto' or by loading the IIFE from 'proto.js' in the browser:

```html
<script src="https://unpkg.com/@jsbits/add-months/proto.js"></script>
```

The new functionality is exposed in separate methods, with an API similar to other methods of the `Date` object:

- `addMonths` for local dates
- `addUTCMonths` for UTC dates

Both methods receive the number of months to add or subtract and **update the value of the object directly**.

The returned value is the number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date, or `NaN` if the date is invalid. The `asUTC` flag is not necessary.

Using `Date.prototype.addMonths.call` with other type than `Date` generates a TypeError.

This example shows the behavior of both methods using the same date instance:

```ts
// this is using ESM syntax, but you can use require()
import '@jsbits/add-months/proto'

// helpers
const showLoc = (dt) => console.log('' + dt)
const showUTC = (dt) => console.log(dt.toJSON())
const showRes = (dt) => console.log(dt)

const date = new Date(2019, 0, 30, 20, 0, 0)

showLoc(date)                   // ⇒ Wed Jan 30 2019 20:00:00 GMT-0600 (CST)
showRes(date.addMonths(1))      // ⇒ 1551405600000
showLoc(date)                   // ⇒ Thu Feb 28 2019 20:00:00 GMT-0600 (CST)

showUTC(date)                   // ⇒ 2019-03-01T02:00:00.000Z
showRes(date.addUTCMonths(1))   // ⇒ 1554084000000
showUTC(date)                   // ⇒ 2019-04-01T02:00:00.000Z
```

### Note about DST

For local dates, the time offset may change if the resulting date has DST activation different from the original.

For example, if a GMT-0600 zone changes to GMT-0500 between May and October, the following will shift the time offset preserving the hour:

```ts
const origin = new Date('2018-01-20T16:00:00')  // ⇒ 2018-01-20 16:00 GMT-0600
const result = addMonths(origin, 6)             // ⇒ 2018-07-20 16:00 GMT-0500
```

The same dates in UTC, which has no time offset, show the change:

```ts
console.log(origin.toISOString())   // ⇒ 2018-01-20T22:00:00.000Z
console.log(result.toISOString())   // ⇒ 2018-07-20T21:00:00.000Z
```

The same happens if you apply a `setMonth(6)` to that date, which is correct and generally expected, just keep it in mind if you handle UTC dates based on local dates.

### Date from String

Avoid creating dates with strings, it is inconsistent.

From [Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) at MDN:

> Note: parsing of date strings with the `Date` constructor (and `Date.parse`, they are equivalent) is strongly discouraged due to browser differences and inconsistencies. Support for [RFC 2822](http://tools.ietf.org/html/rfc2822#page-14) format strings is by convention only. Support for [ISO 8601](http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.15) formats differs in that date-only strings (e.g. "1970-01-01") are treated as UTC, not local.

Even node 6 has problems with this. _Do not use it_ except with the UTC ISO-8601 format.
