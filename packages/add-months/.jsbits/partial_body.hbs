### Date.prototype.addMonths

If you prefer, you can inject this function into the `Date.prototype` by requiring 'proto' or by loading the IIFE from 'add-months/proto.js' in your browser.

In Date.prototype the function is exposed in separate methods: `addMonths` for local dates, and `addUTCMonths` for UTC dates, so the `asUTC` flag is not required.

Also, its behavior changes to that of a setter. That is, the value of the date on which these methods operate _is changed_.

Although you can use `Date.prototype.addMonth.call()`, its use with a type different than Date generates a TypeError.

The return value of both methods is the number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date, or `NaN` if the date is invalid.

This example shows the behavior of both methods using the same date instance:

```ts
// this is using ESM syntax, but you can use require()
import '@jsbits/add-months/proto'

// helpers
const showLoc = (dt) => console.log('' + dt)
const showUTC = (dt) => console.log(dt.toJSON())
const showRes = (dt) => console.log(dt)

const date = new Date(2018, 0, 30, 20, 0, 0)

showLoc(date)                   // => Tue Jan 30 2018 20:00:00 GMT-0600 (CST)
showRes(date.addMonths(1))      // => 1519869600000
showLoc(date)                   // => Wed Feb 28 2018 20:00:00 GMT-0600 (CST)

showUTC(date)                   // => 2018-03-01T02:00:00.000Z
showRes(date.addUTCMonths(1))   // => 1522548000000
showUTC(date)                   // => 2018-04-01T02:00:00.000Z
```

### Note about DST

For local dates, the time offset may change if the resulting date has DST activation different from the original.

For example, if a GMT-0600 zone changes to GMT-0500 between May and October, the following will shift the time offset preserving the hour:

```ts
const origin = new Date('2018-01-20T16:00:00')  // ⇒ 2018-01-20 16:00 GMT-0600
const result = addMonths(origin, 6)             // ⇒ 2018-07-20 16:00 GMT-0500
```

However, the UTC time which has no offset does change:

```ts
console.log(origin.toISOString())   // ⇒ 2018-01-20T22:00:00.000Z
console.log(result.toISOString())   // ⇒ 2018-07-20T21:00:00.000Z
```

The same happens if you apply a `setMonth(6)` to that date, which is correct and generally expected, but keep it in mind if you handle UTC dates based on local dates.
